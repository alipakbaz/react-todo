{"version":3,"sources":["indexedDB/idb.js","func/func.js","config.js","context/app-context.js","view/icons/logo.svg","view/containers/header/header.js","view/component/todo-item/todo-item.js","view/component/btn-add-todo/btn-add-todo.js","view/containers/todo/todo-list.js","view/pages/home.js","app/app.js","index.js"],"names":["openDB","config","dbName","version","objectsStore","Promise","resolve","reject","request","window","indexedDB","open","onupgradeneeded","e","db","target","result","Array","isArray","oSItem","objectStoreNames","contains","name","objectStore","createObjectStore","optionalParameters","indexes","index","createIndex","keyPath","options","onsuccess","onerror","error","message","getAllItems","objectStoreName","transaction","undefined","getAll","addItem","data","add","type","key","updateItem","param","store","get","item","Object","keys","map","propertyName","put","deleteItem","id","delete","incOrder","order","step","openCursor","cursor","value","updateData","update","continue","hideLoadingScreen","loadingScreen","document","getElementById","style","display","opacity","getElementCursorPointerPosition","elementNode","selection","getSelection","rangeCount","range","getRangeAt","commonAncestorContainer","parentNode","endOffset","idbConfig","autoIncrement","unique","AppContext","React","createContext","AppContextProvider","props","dataArray","provider","useState","dataLoaded","setDataLoaded","list","newItemId","activeItem","cursorPointer","todoData","setTodoData","database","setDatabase","listSortCompare","a","b","getAllChildren","parentId","children","childrenIndex","fetch","pId","i","length","parseInt","push","todoList","creator","stack","ch","addTodoItemByAddBtn","title","prevState","updatedState","addTodoItemByEnter","previousItemId","previousItemOrder","splice","updateTodoTitle","deleteTodo","includes","activeItemId","forwardIndentation","itemIndex","sameLevelTodoList","k","newParentItem","j","newData","backIndentation","newParentId","newOrder","parentChildren","lastItem","sort","useEffect","init","Provider","Header","className","src","Logo","alt","width","height","TodoItem","useContext","contentRef","useRef","initialized","setInitialized","interval","newTitle","lastTitleTextChangeTime","lastUpdatedTitleText","updateTitle","current","addEventListener","setInterval","nowTime","Date","getTime","clearInterval","ctrlKey","shiftKey","code","preventDefault","blur","setTimeout","innerText","focus","offset","childNodes","createRange","setStart","collapse","removeAllRanges","addRange","setElementCursorPointer","selectNodeContents","setElementCursorPointerToEnd","viewBox","fill","cx","cy","r","ref","contentEditable","suppressContentEditableWarning","tabIndex","BtnAddTodo","addRef","x1","y1","x2","y2","stroke","strokeWidth","TodoList","Home","Fragment","App","ReactDom","render"],"mappings":"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","file":"static/js/main.d8bf4849.chunk.js","sourcesContent":["export const indexedDBSupported = () => {\r\n    return ('indexedDB' in window);\r\n};\r\n\r\nexport const openDB = config => {\r\n    const {dbName, version, objectsStore} = config;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const request = window.indexedDB.open(dbName, version);\r\n\r\n        request.onupgradeneeded = e => {\r\n            const db = e.target.result;\r\n            if (Array.isArray(objectsStore)) {\r\n                for (const oSItem of objectsStore) {\r\n                    if (!db.objectStoreNames.contains(oSItem.name)) {\r\n\r\n                        const objectStore = db.createObjectStore(oSItem.name, oSItem.optionalParameters);\r\n\r\n                        if (Array.isArray(oSItem.indexes)) {\r\n                            for (const index of oSItem.indexes) {\r\n                                objectStore.createIndex(index.name, index.keyPath, index.options);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        request.onsuccess = e => {\r\n            resolve(e.target.result);\r\n        };\r\n\r\n        request.onerror = e => {\r\n            reject(e.target.error.message);\r\n        };\r\n    });\r\n};\r\n\r\nexport const getAllItems = (db, objectStoreName, index) => {\r\n    return new Promise((resolve, reject) => {\r\n        const transaction = db.transaction(objectStoreName, 'readonly');\r\n        transaction.onerror = e => {\r\n            reject(e.target.error)\r\n        };\r\n\r\n        if (index !== undefined) {\r\n            transaction.objectStore(objectStoreName).index(index).getAll().onsuccess = e => {\r\n                resolve(e.target.result);\r\n            };\r\n        } else {\r\n            transaction.objectStore(objectStoreName).getAll().onsuccess = e => {\r\n                resolve(e.target.result);\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\nexport const addItem = (db, objectStoreName, data) => {\r\n    return new Promise((resolve, reject) => {\r\n        const transaction = db.transaction(objectStoreName, 'readwrite');\r\n        transaction.onerror = e => {\r\n            reject(e.target.error)\r\n        };\r\n\r\n        transaction.objectStore(objectStoreName).add(data).onsuccess = (e) => {\r\n            resolve({\r\n                type: 'ok',\r\n                key: e.target.result\r\n            });\r\n        };\r\n    });\r\n};\r\n\r\nexport const updateItem = param => {\r\n    const {db, store, key, data} = param;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const transaction = db.transaction(store, 'readwrite');\r\n        transaction.onerror = e => {\r\n            reject(e.target.error)\r\n        };\r\n\r\n        const objectStore = transaction.objectStore(store);\r\n\r\n        objectStore.get(key).onsuccess = e => {\r\n            const item = e.target.result;\r\n            if (item) {\r\n                Object.keys(data).map(propertyName => {\r\n                    item[propertyName] = data[propertyName];\r\n                });\r\n\r\n                objectStore.put(item).onsuccess = () => {\r\n                    resolve('ok');\r\n                };\r\n            } else {\r\n                resolve('error');\r\n            }\r\n        };\r\n    });\r\n};\r\n\r\nexport const deleteItem = (db, objectStoreName, id) => {\r\n    return new Promise((resolve, reject) => {\r\n        const transaction = db.transaction(objectStoreName, 'readwrite');\r\n        transaction.onerror = e => {\r\n            reject(e.target.error)\r\n        };\r\n\r\n        transaction.objectStore(objectStoreName).delete(id).onsuccess = () => {\r\n            resolve('ok');\r\n        };\r\n    });\r\n};\r\n\r\nexport const incOrder = param => {\r\n    const {db, store, order} = param;\r\n    let step = param.step ? param.step : 1;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const transaction = db.transaction(store, 'readwrite');\r\n        transaction.onerror = e => {\r\n            reject(e.target.error)\r\n        };\r\n\r\n        const objectStore = transaction.objectStore(store);\r\n\r\n        objectStore.openCursor().onsuccess = e => {\r\n            const cursor = e.target.result;\r\n            if (cursor) {\r\n                if (cursor.value.order >= order) {\r\n                    const updateData = cursor.value;\r\n\r\n                    updateData.order = updateData.order + step;\r\n                    cursor.update(updateData);\r\n                }\r\n\r\n                cursor.continue();\r\n            } else {\r\n                resolve('ok');\r\n            }\r\n        };\r\n    });\r\n};","export const hideLoadingScreen = () => {\r\n    const loadingScreen = document.getElementById('loadingScreen');\r\n    loadingScreen.style.display = 'none';\r\n    loadingScreen.style.opacity = '0';\r\n};\r\n\r\nexport const getElementCursorPointerPosition = elementNode => {\r\n    const selection = window.getSelection();\r\n\r\n    if (selection.rangeCount) {\r\n        const range = selection.getRangeAt(0);\r\n        if (range.commonAncestorContainer.parentNode === elementNode) {\r\n            return range.endOffset;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n};\r\n\r\nexport const setElementCursorPointer = (elementNode, offset) => {\r\n    if (elementNode.childNodes.length > 0 && offset >= 0) {\r\n        const range = document.createRange();\r\n        range.setStart(elementNode.childNodes[0], offset);\r\n        range.collapse(true);\r\n\r\n        const selection = window.getSelection();\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n    }\r\n};\r\n\r\nexport const setElementCursorPointerToEnd = elementNode => {\r\n    if (elementNode.childNodes.length > 0) {\r\n        const range = document.createRange();\r\n        range.selectNodeContents(elementNode);\r\n        range.collapse(false);\r\n\r\n        const selection = window.getSelection();\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n    }\r\n};","export const idbConfig = {\r\n    dbName: 'todo_db',\r\n    version: 1,\r\n    objectsStore: [\r\n        {\r\n            name: 'todo',\r\n            optionalParameters: {\r\n                keyPath: 'id',\r\n                autoIncrement: true\r\n            },\r\n            indexes: [\r\n                {\r\n                    name: 'parentId',\r\n                    keyPath: 'parentId',\r\n                    options: {\r\n                        unique: false\r\n                    }\r\n                },\r\n                {\r\n                    name: 'order',\r\n                    keyPath: 'order',\r\n                    options: {\r\n                        unique: false\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};","import React, {useState, useEffect} from 'react';\r\nimport {idbConfig} from \"../config\";\r\nimport {openDB, addItem, getAllItems, updateItem, deleteItem, incOrder} from \"../indexedDB/idb\";\r\nimport {hideLoadingScreen} from \"../func/func\";\r\n\r\nexport const AppContext = React.createContext({});\r\n\r\nconst AppContextProvider = (props) => {\r\n    const provider = {};\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [todoData, setTodoData] = useState({\r\n        list: [],\r\n        newItemId: 0,\r\n        activeItem: {\r\n            id: 0,\r\n            cursorPointer: -1\r\n        }\r\n    });\r\n    const [database, setDatabase] = useState(null);\r\n\r\n    const listSortCompare = (a, b) => {\r\n        if (a.order > b.order) {\r\n            return 1\r\n        }\r\n        if (a.order < b.order) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    const creatTreeStructure = (dataArray, parentId) => {\r\n        const creator = (pId) => {\r\n            const stack = {};\r\n            for (const item of dataArray) {\r\n                if (parseInt(item.parentId) === parseInt(pId)) {\r\n                    stack[`key-${item.id}`] = item;\r\n                }\r\n            }\r\n\r\n            const keys = Object.keys(stack);\r\n            if (keys.length > 0) {\r\n                for (const key of keys) {\r\n                    stack[key].ch = creator(stack[key].id);\r\n                }\r\n\r\n                return stack;\r\n            }\r\n        };\r\n\r\n        const dataTree = creator(parentId);\r\n\r\n        return (dataTree || {});\r\n    };\r\n\r\n    const getAllChildren = (dataArray, parentId) => {\r\n        const children = [];\r\n        const childrenIndex = {};\r\n\r\n        const fetch = (pId) => {\r\n            for (let i = 0; i < dataArray.length; i++) {\r\n                if (parseInt(dataArray[i].parentId) === parseInt(pId)) {\r\n                    children.push(dataArray[i].id);\r\n                    childrenIndex[dataArray[i].id] = i;\r\n                    fetch(dataArray[i].id);\r\n                }\r\n            }\r\n        };\r\n        fetch(parentId);\r\n\r\n        return {children, childrenIndex};\r\n    };\r\n\r\n    provider.todoList = creatTreeStructure(todoData.list, 0);\r\n    provider.newItemId = parseInt(todoData.newItemId);\r\n    provider.activeItem = todoData.activeItem;\r\n\r\n    provider.addTodoItemByAddBtn = async () => {\r\n        const todoList = todoData.list;\r\n        const data = {\r\n            parentId: 0,\r\n            order: todoList.length > 0 ? (todoList[todoList.length - 1].order + 1) : 100,\r\n            title: ''\r\n        };\r\n        const result = await addItem(database, 'todo', data);\r\n\r\n        // Update data\r\n        if (result.type === 'ok') {\r\n            data.id = result.key; // get todo id\r\n            todoList.push(data);\r\n            setTodoData(prevState => {\r\n                const updatedState = {\r\n                    list: todoList,\r\n                    newItemId: result.key,\r\n                    activeItem: { // reset active item\r\n                        id: 0,\r\n                        cursorPointer: -1\r\n                    }\r\n                };\r\n                return {...prevState, ...updatedState};\r\n            });\r\n        }\r\n    };\r\n\r\n    provider.addTodoItemByEnter = async (parentId, previousItemId, previousItemOrder) => {\r\n        const todoList = todoData.list;\r\n\r\n        // Each of items that its order value is greater than or equal to previousItemOrder+1, one unit increases.\r\n        await incOrder({ // update db\r\n            db: database,\r\n            store: 'todo',\r\n            order: previousItemOrder + 1\r\n        });\r\n        for (let i = 0; i < todoList.length; i++) { // update todo list\r\n            if (todoList[i].order >= (previousItemOrder + 1)) {\r\n                todoList[i].order = todoList[i].order + 1;\r\n            }\r\n        }\r\n\r\n        // Add new item to database\r\n        const data = {\r\n            parentId: parentId,\r\n            order: previousItemOrder + 1,\r\n            title: ''\r\n        };\r\n        const result = await addItem(database, 'todo', data);\r\n\r\n        // Update data\r\n        if (result.type === 'ok') {\r\n            data.id = result.key;\r\n\r\n            for (let i = 0; i < todoList.length; i++) { // insert new item in todo list\r\n                if (todoList[i].id === previousItemId) {\r\n                    todoList.splice(i + 1, 0, data);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            setTodoData(prevState => {\r\n                const updatedState = {\r\n                    list: todoList,\r\n                    newItemId: result.key,\r\n                    activeItem: {\r\n                        id: 0,\r\n                        cursorPointer: -1\r\n                    }\r\n                };\r\n                return {...prevState, ...updatedState};\r\n            });\r\n        }\r\n    };\r\n\r\n    provider.updateTodoTitle = async (id, title, cursorPointer) => {\r\n        const todoList = todoData.list;\r\n        for (let i = 0; i < todoList.length; i++) { // update list\r\n            if (todoList[i].id === id) {\r\n                todoList[i].title = title;\r\n                break;\r\n            }\r\n        }\r\n\r\n        await updateItem({ // update item in db\r\n            db: database,\r\n            store: 'todo',\r\n            key: id,\r\n            data: {\r\n                title: title\r\n            }\r\n        });\r\n\r\n        setTodoData(prevState => { // update state\r\n            const updatedState = {\r\n                list: todoList,\r\n                activeItem: { // set this item as active item\r\n                    id: id,\r\n                    cursorPointer: cursorPointer\r\n                }\r\n            };\r\n            return {...prevState, ...updatedState};\r\n        });\r\n    };\r\n\r\n    provider.deleteTodo = async id => {\r\n        const result = await deleteItem(database, 'todo', id);\r\n\r\n        if (result === 'ok') {\r\n            const todoList = todoData.list;\r\n\r\n            // Delete item children from db and list.\r\n            const {children} = getAllChildren(todoList, id);\r\n            for (const id of children) {\r\n                await deleteItem(database, 'todo', id);\r\n            }\r\n            for (let i = 0; i < todoList.length; i++) {\r\n                if (children.includes(todoList[i].id)) {\r\n                    todoList.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            /*\r\n            Set active item information. And delete requested item from list.\r\n            The active item is the item that will be focused after deleting the requested items.\r\n             */\r\n            let activeItemId = 0;\r\n            for (let i = 0; i < todoList.length; i++) {\r\n                if (parseInt(todoList[i].id) === parseInt(id)) {\r\n                    // set active item\r\n                    if (i > 0) {\r\n                        activeItemId = todoList[i - 1].id;\r\n                    } else if (i + 1 < todoList.length) {\r\n                        activeItemId = todoList[i + 1].id;\r\n                    }\r\n\r\n                    // delete requested item from list.\r\n                    todoList.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            setTodoData(prevState => { // update state\r\n                const updatedState = {\r\n                    list: todoList,\r\n                    activeItem: {\r\n                        id: activeItemId\r\n                    }\r\n                };\r\n\r\n                return {...prevState, ...updatedState};\r\n            });\r\n        }\r\n    };\r\n\r\n    provider.forwardIndentation = async props => {\r\n        const {id, parentId, cursorPointer} = props;\r\n        const todoList = todoData.list;\r\n        let itemIndex = null; // Current item index in todo list array.\r\n\r\n        /*\r\n        List of the items that are level with the current item.\r\n        To identify the parent item\r\n         */\r\n        const sameLevelTodoList = [];\r\n\r\n        for (let k = 0; k < todoList.length; k++) {\r\n            if (todoList[k].parentId === parentId) {\r\n                sameLevelTodoList.push(todoList[k])\r\n            }\r\n\r\n            if (todoList[k].id === id) {\r\n                itemIndex = k;\r\n            }\r\n        }\r\n\r\n        let newParentItem = null;\r\n        for (let j = 0; j < sameLevelTodoList.length; j++) { // identify the parent item\r\n            if (sameLevelTodoList[j].id === id) {\r\n                if (j > 0) {\r\n                    newParentItem = sameLevelTodoList[j - 1];\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (newParentItem !== null) {\r\n            const newData = {\r\n                parentId: newParentItem.id\r\n            };\r\n\r\n            const result = await updateItem({\r\n                db: database,\r\n                store: 'todo',\r\n                key: id,\r\n                data: newData\r\n            });\r\n\r\n            if (result === 'ok') {\r\n                todoList[itemIndex].parentId = newData.parentId; // update list\r\n\r\n                setTodoData(prevState => { // update state\r\n                    const updatedState = {\r\n                        list: todoList,\r\n                        activeItem: {\r\n                            id: id,\r\n                            cursorPointer: cursorPointer\r\n                        }\r\n                    };\r\n\r\n                    return {...prevState, ...updatedState};\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    provider.backIndentation = async props => {\r\n        const {id, parentId, cursorPointer} = props;\r\n        const todoList = todoData.list;\r\n\r\n        if (parentId !== 0) {\r\n            let itemIndex = null; // Current item index in todo list array.\r\n            let newParentId = null; // The parent ID of the item that will be one of its children after the change of direction.\r\n            let newOrder = null; // The order of the item to be set to determine its display order.\r\n\r\n            for (let i = 0; i < todoList.length; i++) { // set newParentId & itemIndex\r\n                if (todoList[i].id === parentId) {\r\n                    newParentId = todoList[i].parentId;\r\n                }\r\n\r\n                if (todoList[i].id === id) {\r\n                    itemIndex = i;\r\n                }\r\n            }\r\n\r\n            // set newOrder\r\n            const parentChildren = getAllChildren(todoList, parentId).children;\r\n            for (let j = itemIndex + 1; j < todoList.length; j++) {\r\n                if (todoList[j].parentId !== parentId && !parentChildren.includes(todoList[j].id)) {\r\n                    newOrder = todoList[j].order;\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (itemIndex !== null && newParentId !== null) {\r\n                if (newOrder === null) {\r\n                    const {children, childrenIndex} = getAllChildren(todoList, id);\r\n                    const lastItem = todoList[(todoList.length - 1)]; // Last item of todo list\r\n                    if (lastItem.id !== id && !children.includes(lastItem.id)) {\r\n                        newOrder = lastItem.order + 1;\r\n\r\n                        // update children order in db and state.\r\n                        for (let i = 0; i < children.length; i++) {\r\n                            const id = children[i];\r\n                            const index = childrenIndex[id];\r\n                            const order = newOrder + i + 1;\r\n\r\n                            todoList[index].order = order;\r\n                            await updateItem({\r\n                                db: database,\r\n                                store: 'todo',\r\n                                key: id,\r\n                                data: {order: order}\r\n                            });\r\n                        }\r\n                    }\r\n                } else {\r\n                    const {children, childrenIndex} = getAllChildren(todoList, id);\r\n                    await incOrder({\r\n                        db: database,\r\n                        store: 'todo',\r\n                        order: newOrder,\r\n                        step: children.length + 1\r\n                    });\r\n                    for (let i = 0; i < todoList.length; i++) { // update list\r\n                        if (todoList[i].order >= newOrder) {\r\n                            todoList[i].order = todoList[i].order + children.length + 1;\r\n                        }\r\n                    }\r\n\r\n                    // update children order in db and state.\r\n                    for (let i = 0; i < children.length; i++) {\r\n                        const id = children[i];\r\n                        const index = childrenIndex[id];\r\n                        const order = newOrder + i + 1;\r\n\r\n                        todoList[index].order = order;\r\n                        await updateItem({\r\n                            db: database,\r\n                            store: 'todo',\r\n                            key: id,\r\n                            data: {order: order}\r\n                        });\r\n                    }\r\n                }\r\n\r\n                const result = await updateItem({ // update current item in db\r\n                    db: database,\r\n                    store: 'todo',\r\n                    key: id,\r\n                    data: newOrder !== null ? {order: newOrder, parentId: newParentId} : {parentId: newParentId}\r\n                });\r\n\r\n                if (result === 'ok') { // success update db\r\n                    todoList[itemIndex].parentId = newParentId;\r\n                    if (newOrder !== null) {\r\n                        todoList[itemIndex].order = newOrder;\r\n\r\n                        /*\r\n                        By changing the order of the item,\r\n                        the list should be sorted again according to the order of the items.\r\n                         */\r\n                        todoList.sort(listSortCompare);\r\n                    }\r\n\r\n                    setTodoData(prevState => { // update state\r\n                        const updatedState = {\r\n                            list: todoList,\r\n                            activeItem: {\r\n                                id: id,\r\n                                cursorPointer: cursorPointer\r\n                            }\r\n                        };\r\n                        return {...prevState, ...updatedState};\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            const db = await openDB(idbConfig);\r\n            setDatabase(db);\r\n\r\n            const data = await getAllItems(db, 'todo', 'order');\r\n            setTodoData(prevState => {\r\n                const update = {\r\n                    list: data\r\n                };\r\n                return {...prevState, ...update}\r\n            });\r\n            setDataLoaded(true);\r\n\r\n            hideLoadingScreen();\r\n        };\r\n\r\n        init();\r\n    }, []);\r\n\r\n    return (\r\n        <AppContext.Provider value={provider}>\r\n            {\r\n                dataLoaded && (\r\n                    props.children\r\n                )\r\n            }\r\n        </AppContext.Provider>\r\n    );\r\n\r\n};\r\n\r\nexport default AppContextProvider;","export default __webpack_public_path__ + \"static/media/logo.ae8e8779.svg\";","import React from 'react';\r\n\r\nimport './header-style.css';\r\n\r\nimport Logo from '../../icons/logo.svg';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <header>\r\n            <div className='container'>\r\n                <nav className='nav flex-row align-items-center'>\r\n                    <div className='logo'>\r\n                        <img src={Logo} alt={'To-Do App'} width={28} height={28} className='fill-primary'/>\r\n                    </div>\r\n                    <h1 className='title'>To-Do</h1>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    );\r\n\r\n};\r\n\r\nexport default Header;","import React, {useRef, useEffect, useContext, useState} from 'react';\r\nimport {AppContext} from \"../../../context/app-context\";\r\nimport {\r\n    setElementCursorPointer,\r\n    getElementCursorPointerPosition,\r\n    setElementCursorPointerToEnd\r\n} from \"../../../func/func\";\r\n\r\nimport './todo-item-style.css';\r\n\r\nconst TodoItem = props => {\r\n    const {data} = props;\r\n    const {\r\n        activeItem,\r\n        addTodoItemByEnter,\r\n        updateTodoTitle,\r\n        deleteTodo,\r\n        newItemId,\r\n        forwardIndentation,\r\n        backIndentation\r\n    } = useContext(AppContext);\r\n    const contentRef = useRef();\r\n    const [initialized, setInitialized] = useState(false);\r\n\r\n    const init = () => {\r\n        let interval = null; // To save text after typing with a short pause.\r\n        let newTitle = data.title;\r\n        let lastTitleTextChangeTime = 0;\r\n        let lastUpdatedTitleText = data.title;\r\n\r\n        const updateTitle = () => {\r\n            lastTitleTextChangeTime = 0;\r\n\r\n            if (newTitle !== lastUpdatedTitleText) {\r\n                updateTodoTitle(data.id, newTitle, getElementCursorPointerPosition(contentRef.current));\r\n\r\n                lastUpdatedTitleText = newTitle;\r\n            }\r\n        };\r\n\r\n        contentRef.current.addEventListener('focus', () => {\r\n            interval = setInterval(() => {\r\n                let nowTime = new Date().getTime();\r\n                if (lastTitleTextChangeTime > 0 && (nowTime - lastTitleTextChangeTime > 400)) {\r\n                    updateTitle();\r\n                }\r\n            }, 100);\r\n        });\r\n\r\n        contentRef.current.addEventListener('blur', e => {\r\n            clearInterval(interval);\r\n            updateTitle();\r\n        });\r\n\r\n        contentRef.current.addEventListener('keydown', e => {\r\n            if (e.ctrlKey && e.shiftKey && e.code === 'Delete') { // Ctrl + Shift + Delete\r\n                e.preventDefault();\r\n                deleteTodo(data.id);\r\n            } else if (e.code === 'Tab') {\r\n                e.preventDefault();\r\n                if (e.shiftKey) { // Shift + Tab\r\n                    backIndentation({\r\n                        id: data.id,\r\n                        parentId: data.parentId,\r\n                        cursorPointer: getElementCursorPointerPosition(contentRef.current),\r\n                    });\r\n                } else {  // Tab\r\n                    forwardIndentation({\r\n                        id: data.id,\r\n                        parentId: data.parentId,\r\n                        cursorPointer: getElementCursorPointerPosition(contentRef.current),\r\n                    });\r\n                }\r\n            } else if (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n                e.preventDefault();\r\n                contentRef.current.blur();\r\n\r\n                /*\r\n                If the item has a child, a new item will be added as a child.\r\n                Otherwise the new item will be added to the current item level\r\n                 */\r\n                if (typeof data.ch === 'object' && data.ch !== null) {\r\n                    addTodoItemByEnter(data.id, data.id, data.order);\r\n                } else {\r\n                    addTodoItemByEnter(data.parentId, data.id, data.order);\r\n                }\r\n            } else {\r\n                setTimeout(() => {\r\n                    lastTitleTextChangeTime = new Date().getTime();\r\n                    newTitle = e.target.innerText;\r\n                }, 0);\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!initialized) {\r\n            init();\r\n            setInitialized(true);\r\n        }\r\n\r\n        if (parseInt(data.id) === activeItem.id) {\r\n            // If this item is set to active, focus on it and adjust the position of the cursor.\r\n            contentRef.current.focus();\r\n\r\n            if (activeItem.cursorPointer >= 0)\r\n                setElementCursorPointer(contentRef.current, activeItem.cursorPointer);\r\n            else\r\n                setElementCursorPointerToEnd(contentRef.current);\r\n        } else if (activeItem.id === 0 && parseInt(data.id) === newItemId) {\r\n            // If a new item is added and this new todo item is the same as the added item, focus on it.\r\n            contentRef.current.focus();\r\n        }\r\n    }, [activeItem.id, data.title]);\r\n\r\n    return (\r\n        <div className='todo-item'>\r\n            <div className='title flex-row'>\r\n                <div className=\"bullet\">\r\n                    <svg viewBox=\"0 0 18 18\" fill=\"currentColor\">\r\n                        <circle cx=\"9\" cy=\"9\" r=\"3.5\"/>\r\n                    </svg>\r\n                </div>\r\n                <div className='content' ref={contentRef} contentEditable={true} suppressContentEditableWarning={true} tabIndex={-1}>{data.title}</div>\r\n            </div>\r\n\r\n            {\r\n                typeof data.ch === 'object' && data.ch !== null &&\r\n                <div className='children'>\r\n                    {\r\n                        Object.keys(data.ch).map(id => {\r\n                            return (\r\n                                <TodoItem data={data.ch[id]} key={'tdi-ch' + id}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default TodoItem;","import React, {useEffect, useContext, useRef} from 'react';\r\n\r\nimport './btn-add-todo-style.css';\r\n\r\nimport {AppContext} from \"../../../context/app-context\";\r\n\r\nconst BtnAddTodo = () => {\r\n    const addRef = useRef();\r\n    const {addTodoItemByAddBtn} = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        addRef.current.addEventListener('click', () => {\r\n            addTodoItemByAddBtn();\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className='btn-add-todo'>\r\n            <svg className=\"icon-plus\" viewBox=\"0 0 20 20\" ref={addRef}>\r\n                <circle cx=\"10.5\" cy=\"10.5\" r=\"9\" fill=\"#dce0e2\" className=\"circle\"/>\r\n                <line x1=\"6\" y1=\"10.5\" x2=\"15\" y2=\"10.5\" stroke=\"#868c90\" strokeWidth=\"1\"/>\r\n                <line x1=\"10.5\" y1=\"6\" x2=\"10.5\" y2=\"15\" stroke=\"#868c90\" strokeWidth=\"1\"/>\r\n            </svg>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default BtnAddTodo;","import React, {useContext} from 'react';\r\nimport {AppContext} from \"../../../context/app-context\";\r\n\r\nimport './todo-list-style.css';\r\n\r\nimport TodoItem from \"../../component/todo-item/todo-item\";\r\nimport BtnAddTodo from \"../../component/btn-add-todo/btn-add-todo\";\r\n\r\nconst TodoList = () => {\r\n    const {todoList} = useContext(AppContext);\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='todo-list'>\r\n                {\r\n                    Object.keys(todoList).map(id => {\r\n                        return (\r\n                            <TodoItem data={todoList[id]} key={'tdi' + id}/>\r\n                        )\r\n                    })\r\n                }\r\n                <BtnAddTodo/>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\nimport Header from \"../containers/header/header\";\r\nimport TodoList from \"../containers/todo/todo-list\";\r\n\r\nconst Home = () => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header/>\r\n            <TodoList/>\r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport {indexedDBSupported} from \"../indexedDB/idb\";\r\nimport {hideLoadingScreen} from \"../func/func\";\r\n\r\nimport './app-style.css';\r\n\r\nimport AppContextProvider from \"../context/app-context\";\r\nimport Home from \"../view/pages/home\";\r\n\r\nconst App = () => {\r\n\r\n    if (indexedDBSupported()) {\r\n        return (\r\n            <AppContextProvider>\r\n                <Home/>\r\n            </AppContextProvider>\r\n        );\r\n    } else {\r\n        hideLoadingScreen();\r\n        return <h1 className='fatal-error'>Your browser doesn't support a stable version of IndexedDB!</h1>\r\n    }\r\n\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './app/app'\r\n\r\nReactDom.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}